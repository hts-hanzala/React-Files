•React Router
		
	»Why Router?
		These days all the web-apps are single page application.
		Every request will be sent to the server from client.
		The server resonds to the client with new HTML.
		Everytime page reloads will happen for every request.
		SPA overcomes the limitations of multi page applications.
		Rather than loading a new page from the server on every user interaction, it loads an entire web page containing all views from the server when the application starts.
		As a result after the initial page load no server communication is required for further page updates upon user interaction.
		
	»Config
		To install the package
			npm install react-router-dom
			
		Importing components to work from react-router-dom
			import BrowserRouter as Router, Routes, Route, Link} from react-router-dom
		
		BrowserRouter 
		 This handles routing by storing the routing content in the browser URL & implements navigation with the inbuilt history stack.
		 
		 <Router>
			<Routes>
				<Route exact path="home" element={<Home/>}>
			</Routes>
		 </Router>
		 
		 path => Maps to the path given in URL
		 
		 exact => If we have 'Comp1' & another name "Comp2" which is nested as 'Comp1/Comp2' the react dom will go through all the define routes & will mistakely returns "Comp1" if we clicked "Comp2", to avoid this we use exact.
		 
		 <Link> => Create nav links using "to".
		 
	»Index Route
		This is the default child route, When there are multiple child route & you may want to render some route as the default route initially.
		<Route index element={<Home />} />
	
	»Route Parameter
		Parameter passed along with URL are called route paramaters.
		These are unchangeable part of a route.
		In this same component is shown for every variation.
		For this to see in action create a Route & assign it a paramater path.
		For working of this use useParams hook of react-router-dom.
		
	»useParams
		Suppose we're creating Topic component & when its we can access it with /topic.
		If we want to specify topics like React, Angular weill add /topic/react.
		This will show either blank page or error.
		So to overcome this problem we use useParams hook.
		
		Import the hook in the sub component.
		And the paramater we have to show assign it as a variable to this hook.
		
		const {name} = useParams()
		
		Then we can access all the paramaters using the variable name.
		
	»Error Handling
		When we have to show error on the undefined routes.
		If user tries to access a component which is not exist we can show an error page instead of blank page.
		Just create an Error component, and assign every routes to it.
		
		
		